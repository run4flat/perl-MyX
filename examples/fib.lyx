#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
My test document
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Boiler plate code that I put at the top of every Perl script:
\end_layout

\begin_layout LyX-Code
use strict;
\end_layout

\begin_layout LyX-Code
use warnings;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Suppose I wanted to discuss the Fibonacci algorithm.
 That algorithm states that 
\begin_inset Formula 
\begin{align*}
f_{0} & =1\\
f_{1} & =1\\
f_{i} & =f_{i-1}+f_{i-2}.
\end{align*}

\end_inset

Evaluating this, we have 
\begin_inset Formula $f_{2}=1+1=2$
\end_inset

, for example.
\end_layout

\begin_layout Section
A simple implementation
\end_layout

\begin_layout Standard
A naive implementation for this series would look like this:
\end_layout

\begin_layout LyX-Code
sub fib_simple {
\end_layout

\begin_deeper
\begin_layout LyX-Code
my $i = shift;
\end_layout

\begin_layout LyX-Code
return 1 if $i < 2;
\end_layout

\begin_layout LyX-Code
return fib_simple($i-1) + fib_simple($i-2);
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
I can then check that the Fibonacci number 
\begin_inset Formula $f_{2}$
\end_inset

 is what I expect:
\end_layout

\begin_layout LyX-Code
print 
\begin_inset Quotes eld
\end_inset

Fib of 2 is 
\begin_inset Quotes eld
\end_inset

, fib_simple(2), 
\begin_inset Quotes eld
\end_inset


\backslash
n
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Standard
The Fibonacci sequence, so defined, does not have a sensible value for non-integ
ers.
 Unfortunately, our simple implementation does not alert us to any poorly
 formed queries:
\end_layout

\begin_layout LyX-Code
print 
\begin_inset Quotes eld
\end_inset

Fib of 2.5 is 
\begin_inset Quotes eld
\end_inset

, fib_simple(2.5), 
\begin_inset Quotes eld
\end_inset


\backslash
n
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Standard
The answer given is the same as the previous: 2.
 The implementation essentially rounds the input down to the next largest
 integer.
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
